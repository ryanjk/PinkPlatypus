using System;
using UnityEngine;
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

/**
    * Tile class
    * data structure that contains information every tile stores. For now, just store if the tile is walkable.
    */
[Serializable]
public class Tile {
	public float value;
	
	public Tile clone() {
		Tile copy = new Tile();
		copy.value = value;
		return copy;
	}
	
	public Type get_type() {
		Type value_to_char = Type.NONE;
		if (value == 0.0f) {
			value_to_char = Type.OVERWORLD_NONWALKABLE; // non-walkable
		}
		else if (value == 1.0f) {
			value_to_char = Type.OVERWORLD_WALKABLE; // walkable
		}
		else if (value == 2.0f) {
			value_to_char = Type.TOWN; // town
		}
		else if (value == 3.0f) {
			value_to_char = Type.ENTRY_PORTAL; // portal entrance
		}
		else if (value == 3.1f) {
			value_to_char = Type.ENTRY_PORTAL_BORDER;
		}
		else if (value == 4.0f) {
			value_to_char = Type.DUNGEON_PORTAL; // portal entrance
		}
		else if (value == 4.1f) {
			value_to_char = Type.DUNGEON_PORTAL_BORDER;
		}
		return value_to_char;
	}
	
	public enum Type {
		OVERWORLD_WALKABLE,
		OVERWORLD_NONWALKABLE,
		ENTRY_PORTAL_BORDER,
		ENTRY_PORTAL,
		DUNGEON_PORTAL_BORDER,
		DUNGEON_PORTAL,
		TOWN,
		
		NONE
	}
	
	public override string ToString() {
		switch(get_type()) {
		case Type.OVERWORLD_NONWALKABLE: return "X";
		case Type.OVERWORLD_WALKABLE: return ".";
		case Type.TOWN: return "T";
		case Type.ENTRY_PORTAL: return "P";
		case Type.ENTRY_PORTAL_BORDER: return "p";
		case Type.DUNGEON_PORTAL: return "D";
		case Type.DUNGEON_PORTAL_BORDER: return "d";
		default: return "";
		}
	}
	public Boolean isWalkable(Tile tile){
		if (tile.get_type()==Type.OVERWORLD_NONWALKABLE)
			return false;
		return true;
		
	}
}

